	Visão Geral Algoritmo

Algoritmo
Sequência de passos
1 -> 2 -> 3 -> 4 -> 5

-Tem repetição 
	-Repetir "x"vezes
	-Repetir até ...
-Também é possível tomar decisão 
	>Com determinada condição executa o passo A ou o passo B 

	Estrutura de Dados

Estrutura de Dados <> Dado


Estrutura de Dados -> Organizar e administrar o dado. Ele que determina as "Regras" dos dados.

Ex. Uma LISTA de aprovados; uma FILA de banco; Uma PILHA Dde livros

Fila: FIFO (Primeiro a entrar, primeiro a sair)
Pilha: LIFO (Ultimo a entrar, primeiro a sair)

Além de Organização em: Arvore, tabela ...

----------------------------------------------------------------	

	Organização JS

>Organizado em Sentenças de Códigos terminadas em ; ou não
	.Que agrupadas são organizadas em Blocos

	Executar JavaScript

-replit
-jsfiddle.net
-Console do browser
-Terminal

	Comentário

-Faça comentario relevantes que acrescente algo. Evitar a redundancia por exemplo, a função se chamar fecharPedido e no comentario dizer que ele fecha o pedido.

-Use identificadores faceis para todos

**Preze pelo seu código, não precisa encher de comentario. Mantenha um código claro e limpo, comentando aquilo que tenha necessidade de comentario.

	Variaveis e Constantes

Variaveis(var,let) - Evite o uso de Var, use o Let
Constante(const) - Constantes não pode ser alterado
	*Quanto mais constantes melhor será para não ter erros de 	
	alteração. Use sempre que seja algo fixo


	Tipagem 

-JavaScript tem tipagem dinamica ou seja tipagem fraca

	Number

*Função para a escolha quantidade de casas decimais (toFixed())
Ex.console.log(media.toFixed(2)) // Quantidade de casas decimais

*Funcão para converter em binario (toString(2))
Ex.console.log(media.toString(2)) //em binario

**Number com N maisculo é uma função, com n minusculo é um tipo

*Contas infinitas não ocorre erro ele apenas retorna um tipo Infinity

*Não multiplica String que não contenham apenas numeros, retorna NaN

	Math

*Valor de PI exato (Math.PI)
*Função para calculo exponencial (Math.pow)
Ex.const area = Math.PI * Math.pow(raio,2);

	String

-Delimita uma String com "", '' ou `` 

*Metodo para encontrar um caracter dentro da String (.charAt(num))
Ex.console.log(escola.charAt(4));

*Metodo para dizer o codigo do caracter na tabela unicode (charCodeAt(num))
Ex.console.log(escola.charCodeAt(3));

*Metodo para encontrar uma String dentro de outra String (.indexOf("val"))
Ex.console.log(escola.indexOf('3'));

*Metodo para imprimir uma substring pelo indice (.subString(apartir) /  .subString(de,ate))
Ex.console.log(escola.substring(1));
   console.log(escola.substring(0,3));

*Metodo para concatenar (.concat);
Ex.console.log("Escola".concat(escola).concat("!"));

*Substituir caracteres dentro de uma String (.replace("inicial","final))
Ex.console.log(escola.replace("3","e"));

*Tranformar uma String em um Array passando como parametro o divisor (.split("divisor"))
Ex.console.log('Ana,Maria,Pedro'.split(','));

**Concatenacao com +, em caso de numeros ele não soma e sim concatena mesmo, diferente das outras operações que ele faz a conta

	Template String

-Concatenações desta maneira são mais limpas no código, além de considerar quebra de linhas, tabs dentre outros
Ex.const template = `
    Olá
    ${nome}!`;
	**Importante deve estar entre crases ``
	  E todo processamento ou variavel deve estar dentro ${}

*Função para tranformar uma string para letra maiuscula
Ex.const up = texto => texto.toUpperCase();
console.log(`Ei... ${up('cuidado')} !`);

Resultado:Ei... CUIDADO !

	Boolean

-Para retornar um boolean em um valor usamos a negação duas vezes.
Ex.isAtivo = 1;
console.log(!!isAtivo)
Resultado:true

**Todos os valores são verdadeiro com excessão do Zero

-É possivel fazer operacoes logicas (or,not,and) em cima de variaveis
Ex.console.log(`pra finalizar...
${!! ('' || null || 0 || ' ')}
`);
Resultado : true

Ou então...
Ex.
let nome = '';
console.log(nome || 'Desconhecido');
>Neste caso acima, caso a variavel nome não esteja preenchida (Retorne False) será retornado a String Desconhecido.

	Array

- Declarando: 
const valores = [val1, val2,val3...]

-Incluindo valores:
valores[indice] = valor
valores.push(val1,val2,val3)

-Excluindo valoress:
console.log(valores.pop()) -> Retira o ultimo valor
delete valores[indice]     -> Retira pelo indice

	Object

- Um par de chaves {} representa um objeto
- Um objeto é uma colecao de chave valor, um grupo de pares de chaves (nome)  e valores.
	**Objeto não é Json

Ex.
prod1.nome = 'Celular Ultra Mega' //Identificador(nome) do objeto e valor(celular..)
prod1.preco = 499.30 //Chave(preco) e Valor(499.30) do objeto

const prod2 = {
    nome: 'Camisa Polo',
    preco: 79.90
}

**A Variavel que armazena o Object, armazena o local onde é armazenado o objeto
- Quando uma variaval recebe outra variavel object, consegue se alterar o objeto pela variavel nova
Ex.
cons a = {nome: 'lucas'} 
console.log(a)
Resultado: {nome:'lucas'}

const b = a
a.nome = 'novo'
console.log(a)
Resultado: {nome: 'novo'} 


	Null e Undefiened

Undefiened
- Variaveis não inicializadas (Sem valor atribuido) 

Null
- Atribuido a variavel. Ausente de valor porém definido a variavel
  **Sempre use o Null caso queira zerar o valor de uma variavel

	Função

**Se JS fosse um País a Função seria o presidente

Tipos Function:
- Object
- Class

-> Função é um bloco de codigo nomeado, onde pode ser reusado no código
- Nele pode ser inserido um parametro ou não, onde tem um processo com linhas de codigo e retorna ou não um valor

* Pode armazenar uma funcao em uma variavel 
Ex. const imprimirSoma = function(a,b) {
console.log(a+b)
}

Funcao Arroy
- Não faz uso da palavra function
Ex. const soma => (a,b){
return a+b
}

Retorno implicito

-Quando sua funcao tiver apenas uma linha de codigo pode fazer da seguinte maneira
Ex. const subtracao = (a,b) => a-b

	Variaveis
Escopo
-Local onde sua variavel é visivel/acessivel 
Ex. uma variavel é visivel apenas dentro do seu bloco de codigo

VAR
>>A variavel VAR é visivel dentro e fora do seu bloco 
**Com excessao de uma Function, ela só será visivel dentro da funcao

- Evite usar variavel em um escopo global, pois apesar de parecer vantajoso usar a qualquer momento é muito arriscado que a variavel seja sobrescrita 

LET
- Diferente do VAR ele é visivel apenas dentro do seu bloco 

	Loop
-Repetir o código varias vezes 
Ex.for(var/let = 0; i < 10; i++){
console.log(i)
}
----------------------------Exemplo-------------------
const funcs = []

for(var i = 0; i<10; i++){
    funcs.push(function(){
        console.log(i)
    })
}

funcs[2]()
funcs[8]()

=> O que voce acha que acontece?
Em teoria mostraria na tela os numeros 2 e 8 porem por a variavel ser declarado com VAR ira mostrar 10 as duas vezes por um problema da linguagem
- Para corrigir basta no for usando ao inves de VAR usar a declaracao com LET
---------------------------------------------------------

	Hoisting

-Ao declarar uma variavael vom Var em qualquer lugar do texto, ela sofre o Hoisting, ou seja, ela é jogada pra cima
--Com LET isso não acontece

	Função vd Objeto
- A função pode ser instanciada e a partir dessa instancia que seria um objeto 
	
	Par Nome Valor

-O contexto lexico é quando sua variavel é declarada no contexto fisico do seu código, quando que ela é declarada
Ex. Uma variavel declarada no contexto fora de uma Function e uma variavel com o mesmo nome declarada dentro de uma Function, não ira ter conflito por estar em contextos diferentes

	Notação Ponto
- A Notacao this faz com que a variavel ou funcao dentro de uma funcao fica publica

	






